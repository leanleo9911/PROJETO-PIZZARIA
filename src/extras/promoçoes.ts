import fs from 'fs-extra';
import path from 'path';
import readlineSync from 'readline-sync';

const baseDir = __dirname;
const csvPath = path.join(baseDir, 'promocoes.csv');

export function listarPromocoes(): void {
    if (!fs.existsSync(csvPath) || fs.statSync(csvPath).size === 0) {
        console.log('Nenhuma promo√ß√£o cadastrada.');
        return;
    }
    console.log('\nüéâ Promo√ß√µes Atuais:');
    const linhas = fs.readFileSync(csvPath, 'utf-8').split('\n').filter(l => l.trim());
    linhas.forEach((linha, idx) => {
        console.log(`${idx + 1}. ${linha}`);
    });
}

export function formasPagamento(): void {
    console.log('üí≥ Formas de Pagamento:');
    console.log('- Dinheiro');
    console.log('- Cart√£o de Cr√©dito/D√©bito');
    console.log('- Pix');
}

export function menuPromocoes(): void {
    function adicionarPromocao(): void {
        const descricao = readlineSync.question('Descri√ß√£o da promo√ß√£o: ');
        fs.appendFileSync(csvPath, descricao + '\n', 'utf-8');
        console.log('‚úÖ Promo√ß√£o adicionada!');
    }

    function consultarPromocoes(): void {
        if (!fs.existsSync(csvPath) || fs.statSync(csvPath).size === 0) {
            console.log('Nenhuma promo√ß√£o cadastrada.');
            return;
        }
        console.log('\nüéâ Promo√ß√µes Atuais:');
        const linhas = fs.readFileSync(csvPath, 'utf-8').split('\n').filter(l => l.trim());
        linhas.forEach((linha, idx) => {
            console.log(`${idx + 1}. ${linha}`);
        });
    }

    function atualizarPromocao(): void {
        if (!fs.existsSync(csvPath) || fs.statSync(csvPath).size === 0) {
            console.log('Nenhuma promo√ß√£o cadastrada.');
            return;
        }
        const promocoes = fs.readFileSync(csvPath, 'utf-8').split('\n').filter(l => l.trim());
        consultarPromocoes();
        const num = readlineSync.question('Digite o n√∫mero da promo√ß√£o para atualizar: ');
        const idx = parseInt(num) - 1;
        if (isNaN(idx) || idx < 0 || idx >= promocoes.length) {
            console.log('‚ùå N√∫mero inv√°lido.');
            return;
        }
        const novaDesc = readlineSync.question('Nova descri√ß√£o: ');
        promocoes[idx] = novaDesc;
        fs.writeFileSync(csvPath, promocoes.join('\n') + '\n', 'utf-8');
        console.log('‚úÖ Promo√ß√£o atualizada!');
    }

    function excluirPromocao(): void {
        if (!fs.existsSync(csvPath) || fs.statSync(csvPath).size === 0) {
            console.log('Nenhuma promo√ß√£o cadastrada.');
            return;
        }
        const promocoes = fs.readFileSync(csvPath, 'utf-8').split('\n').filter(l => l.trim());
        consultarPromocoes();
        const num = readlineSync.question('Digite o n√∫mero da promo√ß√£o para excluir: ');
        const idx = parseInt(num) - 1;
        if (isNaN(idx) || idx < 0 || idx >= promocoes.length) {
            console.log('‚ùå N√∫mero inv√°lido.');
            return;
        }
        promocoes.splice(idx, 1);
        fs.writeFileSync(csvPath, promocoes.join('\n') + '\n', 'utf-8');
        console.log('‚úÖ Promo√ß√£o exclu√≠da!');
    }

    while (true) {
        console.log('\n--- Menu de Promo√ß√µes ---');
        console.log('1. Adicionar Promo√ß√£o');
        console.log('2. Consultar Promo√ß√µes');
        console.log('3. Atualizar Promo√ß√£o');
        console.log('4. Excluir Promo√ß√£o');
        console.log('0. Voltar');
        const escolha = readlineSync.question('Escolha uma op√ß√£o: ');
        if (escolha === '1') {
            adicionarPromocao();
        } else if (escolha === '2') {
            consultarPromocoes();
        } else if (escolha === '3') {
            atualizarPromocao();
        } else if (escolha === '4') {
            excluirPromocao();
        } else if (escolha === '0') {
            break;
        } else {
            console.log('‚ùå Op√ß√£o inv√°lida.');
        }
    }
}
